{\rtf1\ansi\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\f0\fs20\lang1033 package runSimulation;\par
\par
/**\par
 *\par
 * @author giannis\par
 */\par
public class Packet \par
\{\par
   private final int ID;\par
   private final String name;\par
   private final int arrivalTimeSlot;\par
   private int transmissionTimeSlot;\par
   \par
   public Packet(int ID,String name,int timeSlot)\par
   \{\par
       this.ID = ID;\par
       this.name = name;\par
       this.arrivalTimeSlot = timeSlot;\par
       \par
   \}\par
   public int getID()\par
   \{\par
       return ID;\par
   \}\par
   public String getName()\par
   \{\par
       return name;\par
       \par
   \}\par
   public int getTimeSlot()\par
   \{\par
       return arrivalTimeSlot;\par
   \}\par
   public void setTransmissionTimeSlot(int timeSlot)\par
   \{\par
       this.transmissionTimeSlot = timeSlot;\par
   \}\par
   public int getTransmissionTimeSlot()\par
   \{\par
       return this.transmissionTimeSlot;\par
   \}\par
   public int getDelay()//the difference between packet enqueuing timeslot and succesful transmision time slot\par
   \{\par
       return this.transmissionTimeSlot - this.arrivalTimeSlot;\par
   \}\par
\}\par
\par
\par
package runSimulation;\par
\par
import java.util.ArrayList;\par
\par
/**\par
 *\par
 * @author giannis\par
 */\par
public class Station \par
\{\par
    //private final  double TRANSMISSION_SUCCESS_PROB = 0.5;\par
    private final String name;\par
    private final int ID;\par
    private final ArrayList<Packet> buffer;\par
    private final String waveLength;\par
    private boolean tryingToTransmit;\par
    \par
    public Station(int ID,String name,String waveLength,double arrivingProb) \par
    \{\par
       this.ID = ID;\par
       this.name = name;\par
       this.buffer = new ArrayList<>();\par
       this.waveLength = waveLength;\par
       this.tryingToTransmit = false;\par
    \}\par
    public String getName()\par
    \{\par
        return name;\par
    \}\par
    public int getID()\par
    \{\par
        return ID;\par
    \}\par
   public ArrayList<Packet> getBuffer()\par
    \{\par
       return this.buffer;\par
    \}\par
    public int transmit(int value)\par
    \{\par
        if((!(this.buffer.isEmpty())) && (value == 1))//if the buffer is empty we have nothing to transmit\par
        \{\par
           this.tryingToTransmit = true;\par
           return 1;\par
          \par
        \}\par
        return 0;\par
    \}\par
    \par
    public void addToBuffer(Packet p)\par
    \{\par
        this.buffer.add(p);\par
    \}\par
    public String getWaveLength()\par
    \{\par
        return waveLength;\par
    \}\par
    \par
   /*public boolean transmitting()\par
   \{\par
       return this.tryingToTransmit;\par
   \}*/\par
    \par
\par
\}\par
\par
package runSimulation;\par
\par
import java.util.ArrayList;\par
\par
/**\par
 *\par
 * @author giannis\par
 */\par
public class Simulation \par
\{\par
    private final static double TRANSMISSION_SUCCESS_PROB = 0.5; \par
    private final static int NUM_OF_STATIONS = 8;\par
    private static double arrivalProb;\par
    private static ArrayList<Station> stations;\par
    private static double timeSlots;\par
    private static ArrayList<Packet> transmittedPackets;\par
    private static ArrayList<Packet> enqueuedPackets;\par
    private static ArrayList<Packet> totalPackets;//either enqueued or not\par
    private static int numOfCollisions;\par
   \par
   /**\par
       This class run defines the algorithm of the simulation it does the following:\par
       1)Create packets\par
       2)Enqueue the packets according to a binomial distributed number generating function \par
       with input argument the arrival probability\par
       3)Find Collisions \par
       4)generate binomial distributed number with probability TRANSMISSION_SUCCESS_PROBABILITY = 0.5\par
     * @param inputProb\par
     * @param numOfTimeSlots\par
    */\par
   public Simulation(double inputProb,int numOfTimeSlots)\par
    \{\par
        stations = new ArrayList<>();\par
        transmittedPackets = new ArrayList<>();\par
        enqueuedPackets = new ArrayList<>();\par
        totalPackets = new ArrayList<>();\par
        numOfCollisions = 0;\par
        Simulation.arrivalProb = inputProb;\par
        Simulation.timeSlots = numOfTimeSlots;\par
        createStations(arrivalProb); //define station probs through poisson distribution\par
        simulationAlgorithm();\par
    \}\par
     /**\par
      * Creates two binomial distributed numbers (0 or 1)\par
      * one for p = 0.1 to 1.0 for arrival probability\par
      * and one for p = 0.5 the successful transmission probability \par
      * If one station tries transmitting checks first if transmission try occurs from second\par
      * station at the same wavelength.If collision occurs the packets stay at each station queues for \par
      * future transmitting\par
      * \par
      */\par
    public final void simulationAlgorithm()\par
    \{ \par
        for(Integer slot = 1; slot<=Simulation.timeSlots; slot++)\par
        \{\par
              ArrayList<Integer> arrivals = calcArrivalBinomial();\par
              putPacketsToBuffers(arrivals,slot);//put packets accoriding to arrivals number\par
              ArrayList<Integer> succesfullTransmissionBinomial = Simulation.calcTransmissionBinomial();\par
              for(Integer i=0; i<Simulation.NUM_OF_STATIONS; i+=2)\par
              \{\par
                  Station s1 = stations.get(i);\par
                  Station s2 = stations.get(i+1);\par
                  int val1 = succesfullTransmissionBinomial.get(i);//binomial generated 0 or 1 with p = 0.5\par
                  int val2 = succesfullTransmissionBinomial.get(i+1);\par
                  if(s1.transmit(val1) == 1)\par
                  \{\par
                      if(s2.transmit(val2) == 1)\par
                      \{\par
                         \par
                         numOfCollisions++;\par
                         //System.out.println("COLLISION");\par
                      \}\par
                      else \par
                      \{\par
                         Simulation.transmittedPackets.add(s1.getBuffer().get(0));//put the first packet of queue in transmitted packets\par
                         s1.getBuffer().get(0).setTransmissionTimeSlot(slot);\par
                         s1.getBuffer().remove(0);// remove it from stations queue\par
                      \}\par
                     \par
                   \}\par
                  else if(s2.transmit(val2) == 1)\par
                  \{\par
                      Simulation.transmittedPackets.add(s2.getBuffer().get(0));\par
                      s2.getBuffer().get(0).setTransmissionTimeSlot(slot);\par
                      s2.getBuffer().remove(0);\par
                  \}\par
              \}\par
             \par
        \}\par
   \}\par
    /**\par
     * CreateStations creates 4 pairs of stations and assigns 4 different wavelengths in each pair\par
     * @param arrivingProb \par
     */           \par
    public final void createStations(double arrivingProb)\par
    \{\par
        Integer m = 1;\par
        for(Integer i = 0; i<NUM_OF_STATIONS; i+=2)\par
        \{\par
            Station station1 = new Station(i,"Station_"+i.toString(),"\'ce\'bb"+m.toString(),arrivingProb);\par
            Integer j = i+1;\par
           \par
            Station station2 = new Station(j,"Station_"+j.toString(),"\'ce\'bb"+m.toString(),arrivingProb);\par
            stations.add(station1);\par
            stations.add(station2);\par
            m++;\par
        \}\par
    \}\par
  /**\par
   * Creates a 0 or 1 with probability p\par
   * 1)generates random uniform distributed number \par
   * 2)checks if p belongs to (0,p)\par
   * 3)if it belongs return 1 else returns 0;\par
   * @param p\par
   * @return \par
   */\par
   public static int getBinomial( double p) //\par
   \{\par
      int x = 0;\par
      if(Math.random() < p)\par
         x++;\par
      return x;\par
   \}\par
    \par
 \par
  /**\par
   * generates binomial distributed number for every station\par
   * if number is 1 we have an new arrival else no packet arrived\par
   * @return \par
   */  \par
  public static ArrayList<Integer> calcArrivalBinomial()\par
  \{\par
      ArrayList<Integer> arrivalBinomial = new ArrayList<>();\par
      for(int i = 1; i<=8; i++)\par
      \{\par
          arrivalBinomial.add(getBinomial(Simulation.arrivalProb));\par
      \}\par
      return arrivalBinomial;\par
  \}\par
 \par
 \par
  public static double calcTotalDelay()\par
  \{\par
      double total = 0;\par
      for(Packet p:Simulation.transmittedPackets)\par
      \{\par
         total += p.getDelay();\par
      \}\par
      \par
      return total;\par
  \}\par
  \par
  public   static double calcAverageDelay()\par
  \{\par
      return calcTotalDelay()/Simulation.transmittedPackets.size();\par
  \}\par
  \par
  public  static double getThroughput()\par
  \{\par
      double t = Simulation.transmittedPackets.size()/Simulation.timeSlots;\par
      return t;\par
  \}\par
  /**\par
   * put the arrived packets to buffer after consulting the generated array list created by\par
   * calcArrivalBinomial\par
   * @param arrivalBinomial\par
   * @param timeSlot \par
   */\par
  public static void putPacketsToBuffers(ArrayList<Integer> arrivalBinomial,Integer timeSlot)\par
  \{\par
      for(Integer i = 0; i<8; i++)\par
      \{\par
          if(arrivalBinomial.get(i) == 1)\par
          \{\par
              Packet packet = new Packet(i,"P"+timeSlot.toString()+" of "+stations.get(i).getName(),timeSlot);\par
              if(stations.get(i).getBuffer().size()<5)//checks if the buffer of every station is full\par
              \{\par
                 //Packet packet = new Packet(i,"P"+timeSlot.toString()+" of "+stations.get(i).getName(),timeSlot);\par
                 enqueuedPackets.add(packet);\par
                 totalPackets.add(packet);\par
                 stations.get(i).getBuffer().add(packet);\par
              \}\par
              else\par
              \{\par
                totalPackets.add(packet);\par
              \}\par
            \par
          \}\par
      \}\par
  \}\par
  public static ArrayList<Integer> calcTransmissionBinomial()\par
  \{\par
      ArrayList<Integer> transmissionBinomial = new ArrayList<>();\par
      for(int i = 1; i<=8; i++)\par
      \{\par
          transmissionBinomial.add(getBinomial(Simulation.TRANSMISSION_SUCCESS_PROB));\par
      \}\par
      return transmissionBinomial;\par
  \}\par
  public static int getCollisionsNum()\par
  \{\par
      return numOfCollisions;\par
  \}\par
  public static double getPercentage()\par
  \{\par

\pard\ri-540\tx8640      return (double)         Simulation.transmittedPackets.size()/Simulation.totalPackets.size();\par

\pard   \par
  \}\par
 \par
    \par
\}\par
\par
\par
\par
\par
package runSimulation;\par
\par
import java.io.IOException;\par
import java.io.PrintWriter;\par
\par
/**\par
 *\par
 * @author giannis\par
 */\par
public class runSimulation \{\par
\par
    /**\par
     */\par
     public runSimulation()\{\}\par
    \par
    public static void main(String[] args) \{\par
        int numberOfPackets;\par
        int numberOfTimeSlots = 500;\par
        Simulation sim;\par
        PrintWriter results;\par
        //PrintWriter printResults;\par
        try\par
        \{\par
           double[] inputProbs = \{0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0\};\par
           results =  new PrintWriter("C:\\\\Users\\\\giannis\\\\Desktop\\\\javaProgramms\\\\Simulation\\\\results.txt ");\par
           \par
           for(Double d:inputProbs)\par
           \{\par
               \par
               System.out.println("Results for arrival probability: "+d);\par
               sim = new Simulation(d,500);\par
               results.println("throughPut: "+Simulation.getThroughput());\par
               results.println("Average Delay: "+Simulation.calcAverageDelay());\par
System.out.println("The number of Collisions: "+Simulation.getCollisionsNum());\par
               System.out.println("percentage of successful transmission: "+Simulation.getPercentage());\par
               System.out.println("throughput: "+Simulation.getThroughput());\par
               System.out.println("Average Delay: "+Simulation.calcAverageDelay());\par
           \}\par
        \}catch(IOException e)\par
        \{\par
            System.out.println("can't create file");\par
        \}\par
      \par
        \par
        \par
\}\par
        \par
\}\par
    \par
\par
\ul\b RESULTS \par
\ulnone\b0\par
}
 